using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Threading.Tasks;
using Dapper;
using Ecoplus.domain.core.Aggregats;
using Ecoplus.domain.core.Dtos;
using Ecoplus.domain.core.Interfaces.Repository;

namespace Ecoplus.Infrastructure.Repository
{
    public class ExploitantRepositories : IExploitantRepositories
    {
        private readonly string _strcnx = ConfigurationManager.ConnectionStrings["Database:Ecoplus"].ConnectionString;
        public async Task<IEnumerable<ExploitantDtos>> ListeExploitant()
        {
            using (var cnx=new SqlConnection(_strcnx))
            {
                cnx.Open();
                var result =
                    await cnx.QueryAsync<ExploitantDtos>("Select_exploitant", commandType: CommandType.StoredProcedure);
                cnx.Close();
                return result;
            }
            throw new System.NotImplementedException();
        }

        public async Task<bool> Modifier(Guid idExploitant, Exploitant monExploitant)
        {
            using (var cnx=new SqlConnection(_strcnx))
            {
                cnx.Open();
                var param = new DynamicParameters();
                param.Add("@idexploitant", monExploitant.Id);
                param.Add("@nom", monExploitant.Nom);
                param.Add("@prenom", monExploitant.Prenom);
                param.Add("@adresse", monExploitant.Adresse);
                param.Add("@tel", monExploitant.Tel);
                param.Add("@surface", monExploitant.Surface);
                param.Add("@departement", monExploitant.Departement);
                param.Add("@ville", monExploitant.Ville);
                param.Add("@datemodif", monExploitant.DateModif);

                var result = await cnx.ExecuteAsync("Update_exploitants", param, commandType: CommandType.StoredProcedure);
                cnx.Close();
                return result > 0;
            }
            throw new System.NotImplementedException();
        }

        public async Task<bool> Enregistrer(Exploitant monExploitant)
        {
            using (var cnx=new SqlConnection(_strcnx))
            {
                cnx.Open();
                var param=new DynamicParameters();
                param.Add("@idexploitant",monExploitant.Id);
                param.Add("@nom",monExploitant.Nom);
                param.Add("@prenom",monExploitant.Prenom);
                param.Add("@adresse",monExploitant.Adresse);
                param.Add("@tel",monExploitant.Tel);
                param.Add("@surface",monExploitant.Surface);
                param.Add("@departement",monExploitant.Departement);
                param.Add("@ville",monExploitant.Ville);
                param.Add("@datemodif",monExploitant.DateModif);

                var result =await cnx.ExecuteAsync("Insert_exploitants", param, commandType: CommandType.StoredProcedure);
                cnx.Close();
                return result > 0;
            }
            throw new NotImplementedException();
        }

        public async Task<bool> Supprimer(Guid idexploitant)
        {
            using (var cnx=new SqlConnection(_strcnx))
            {
                cnx.Open();
                var param=new DynamicParameters();
                param.Add("@idexploitant",idexploitant);
                var result=await cnx.ExecuteAsync("Delete_exploitant", param, commandType: CommandType.StoredProcedure);
                cnx.Close();
                return result > 0;
            }
            throw new NotImplementedException();
        }
    }
}